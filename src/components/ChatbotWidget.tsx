
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Bot, Send, RefreshCw, User, Shield } from "lucide-react";
import { cn } from '@/lib/utils';
import { useToast } from "@/components/ui/use-toast";

type Message = {
  id: string;
  role: 'user' | 'bot';
  content: string;
  timestamp: Date;
};

const initialMessages: Message[] = [
  {
    id: '1',
    role: 'bot',
    content: 'Hello! I\'m CyberWise, your cybersecurity assistant. How can I help you stay safe online today?',
    timestamp: new Date(),
  },
];

const cybersecurityFAQ: Record<string, string> = {
  'password': 'To create a strong password, use at least 12 characters with a mix of uppercase and lowercase letters, numbers, and special characters. Avoid using personal information or common words. Consider using a password manager to generate and store unique passwords for each account.',
  'phishing': 'Phishing attacks try to steal your sensitive information by posing as legitimate entities. Always verify email senders, don\'t click suspicious links, check URLs carefully, and never provide personal information in response to unexpected requests.',
  'two-factor': '2FA adds an extra layer of security by requiring two forms of identification before granting account access. Even if someone obtains your password, they can\'t access your account without the second factor (typically a code sent to your phone or generated by an app).',
  'malware': 'To protect against malware, keep your software updated, use reputable antivirus software, avoid downloading files from untrusted sources, and be cautious when clicking links or opening attachments.',
  'vpn': 'A Virtual Private Network (VPN) encrypts your internet connection, protecting your data from eavesdroppers, hiding your IP address, and allowing you to browse the web more privately and securely, especially on public Wi-Fi networks.',
  'update': 'Software updates often contain security patches for vulnerabilities that could be exploited by hackers. Enabling automatic updates ensures your devices and applications have the latest security protections.',
  'wifi': 'Public Wi-Fi networks are often unsecured, making it easy for attackers to intercept your data. Avoid accessing sensitive information (banking, email) on public Wi-Fi, or use a VPN to encrypt your connection.',
  'backup': 'Regular backups help protect against data loss from ransomware, device failure, or theft. Follow the 3-2-1 rule: keep 3 copies of your data, on 2 different types of storage, with 1 copy stored off-site or in the cloud.',
};

const ChatbotWidget = () => {
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const generateResponse = (query: string): string => {
    const lowerQuery = query.toLowerCase();
    let response = "I don't have specific information on that topic yet. For accurate cybersecurity advice, consider consulting official resources like NIST (National Institute of Standards and Technology) or CISA (Cybersecurity & Infrastructure Security Agency).";
    
    // Check for keyword matches in our FAQ
    for (const [keyword, answer] of Object.entries(cybersecurityFAQ)) {
      if (lowerQuery.includes(keyword)) {
        response = answer;
        break;
      }
    }
    
    return response;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    // Simulate AI response delay
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: 'bot',
        content: generateResponse(input),
        timestamp: new Date(),
      };
      
      setMessages((prev) => [...prev, botResponse]);
      setIsLoading(false);
    }, 1000);
  };

  const handleReset = () => {
    toast({
      title: "Chat Reset",
      description: "Your conversation has been reset.",
    });
    setMessages(initialMessages);
  };

  return (
    <section id="chatbot" className="py-16 bg-gradient-to-b from-background to-muted">
      <div className="cyber-container">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold">Ask CyberWise</h2>
          <p className="mt-3 text-muted-foreground max-w-2xl mx-auto">
            Have questions about cybersecurity? Our AI assistant is here to help with practical advice and security best practices.
          </p>
        </div>
        
        <div className="max-w-4xl mx-auto">
          <Card className="border border-border shadow-lg backdrop-blur-sm bg-background/90">
            <CardHeader className="border-b">
              <div className="flex items-center space-x-2">
                <div className="w-10 h-10 rounded-full bg-cyber-accent/20 flex items-center justify-center">
                  <Bot className="h-5 w-5 text-cyber-accent" />
                </div>
                <CardTitle>CyberWise Assistant</CardTitle>
              </div>
            </CardHeader>
            <CardContent className="p-6 h-[400px] overflow-y-auto flex flex-col space-y-4">
              {messages.map((message) => (
                <div 
                  key={message.id}
                  className={cn(
                    "flex",
                    message.role === "user" ? "justify-end" : "justify-start"
                  )}
                >
                  <div 
                    className={cn(
                      "max-w-[80%] rounded-lg px-4 py-3",
                      message.role === "user" 
                        ? "bg-cyber-accent/20 border border-cyber-accent/30"
                        : "bg-cyber-primary/20 border border-cyber-primary/30"
                    )}
                  >
                    <div className="flex items-center space-x-2 mb-1">
                      {message.role === "bot" ? (
                        <>
                          <Shield size={16} className="text-cyber-accent" />
                          <span className="text-xs font-medium">CyberWise</span>
                        </>
                      ) : (
                        <>
                          <User size={16} className="text-muted-foreground" />
                          <span className="text-xs font-medium">You</span>
                        </>
                      )}
                      <span className="text-xs text-muted-foreground ml-auto">
                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </div>
                    <p className="text-sm">{message.content}</p>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="max-w-[80%] rounded-lg px-4 py-3 bg-cyber-primary/10 border border-cyber-primary/20">
                    <div className="flex items-center space-x-2">
                      <Shield size={16} className="text-cyber-accent" />
                      <span className="text-xs font-medium">CyberWise</span>
                    </div>
                    <div className="flex items-center space-x-2 mt-2">
                      <div className="h-2 w-2 rounded-full bg-cyber-accent animate-pulse"></div>
                      <div className="h-2 w-2 rounded-full bg-cyber-accent animate-pulse delay-100"></div>
                      <div className="h-2 w-2 rounded-full bg-cyber-accent animate-pulse delay-200"></div>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
            <CardFooter className="border-t p-4">
              <form onSubmit={handleSubmit} className="w-full flex items-center space-x-2">
                <Button 
                  type="button" 
                  size="icon" 
                  variant="outline" 
                  onClick={handleReset}
                  title="Reset conversation"
                >
                  <RefreshCw className="h-4 w-4" />
                </Button>
                <Input 
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Ask about passwords, phishing, malware..."
                  className="flex-1 cyber-input"
                  disabled={isLoading}
                />
                <Button 
                  type="submit" 
                  size="icon"
                  className="bg-cyber-accent hover:bg-cyber-accent/90"
                  disabled={isLoading || !input.trim()}
                >
                  <Send className="h-4 w-4" />
                </Button>
              </form>
            </CardFooter>
          </Card>
          
          <div className="mt-4 text-sm text-center text-muted-foreground">
            <p>This is a simplified demo. Try asking about passwords, phishing, two-factor authentication, malware, VPNs, updates, Wi-Fi security, or data backups.</p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ChatbotWidget;
