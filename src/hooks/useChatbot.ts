import { useState, useCallback } from 'react';
import { useToast } from "@/components/ui/use-toast";
import { useConversation } from '@11labs/react';

type Message = {
  id: string;
  role: 'user' | 'bot';
  content: string;
  timestamp: Date;
  image?: string;
};

const initialMessages: Message[] = [
  {
    id: '1',
    role: 'bot',
    content: 'Hello! I\'m CyberWise, your cybersecurity assistant. How can I help you stay safe online today?',
    timestamp: new Date(),
  },
];

const cybersecurityFAQ: Record<string, string> = {
  'password': 'To create a strong password, use at least 12 characters with a mix of uppercase and lowercase letters, numbers, and special characters. Avoid using personal information or common words. Consider using a password manager to generate and store unique passwords for each account.',
  'phishing': 'Phishing attacks try to steal your sensitive information by posing as legitimate entities. Always verify email senders, don\'t click suspicious links, check URLs carefully, and never provide personal information in response to unexpected requests.',
  'two-factor': '2FA adds an extra layer of security by requiring two forms of identification before granting account access. Even if someone obtains your password, they can\'t access your account without the second factor (typically a code sent to your phone or generated by an app).',
  'malware': 'To protect against malware, keep your software updated, use reputable antivirus software, avoid downloading files from untrusted sources, and be cautious when clicking links or opening attachments.',
  'vpn': 'A Virtual Private Network (VPN) encrypts your internet connection, protecting your data from eavesdroppers, hiding your IP address, and allowing you to browse the web more privately and securely, especially on public Wi-Fi networks.',
  'update': 'Software updates often contain security patches for vulnerabilities that could be exploited by hackers. Enabling automatic updates ensures your devices and applications have the latest security protections.',
  'wifi': 'Public Wi-Fi networks are often unsecured, making it easy for attackers to intercept your data. Avoid accessing sensitive information (banking, email) on public Wi-Fi, or use a VPN to encrypt your connection.',
  'backup': 'Regular backups help protect against data loss from ransomware, device failure, or theft. Follow the 3-2-1 rule: keep 3 copies of your data, on 2 different types of storage, with 1 copy stored off-site or in the cloud.',
};

export const useChatbot = () => {
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const { toast } = useToast();

  const conversation = useConversation({
    overrides: {
      tts: {
        voiceId: "Charlotte",
      },
    },
    onError: (message: string) => {
      toast({
        title: "Voice Assistant Error",
        description: message,
        variant: "destructive",
      });
    },
  });

  const toggleVoice = useCallback(async () => {
    if (!isListening) {
      try {
        await conversation.startSession({
          agentId: "YOUR_AGENT_ID",
        });
        setIsListening(true);
        toast({
          title: "Voice Assistant Activated",
          description: "I'm listening! Ask me anything about cybersecurity.",
        });
      } catch (error) {
        toast({
          title: "Error",
          description: "Could not start voice assistant. Please check your microphone permissions.",
          variant: "destructive",
        });
      }
    } else {
      await conversation.endSession();
      setIsListening(false);
    }
  }, [isListening, conversation, toast]);

  const toggleMute = useCallback(() => {
    conversation.setVolume({ volume: isMuted ? 1 : 0 });
    setIsMuted(!isMuted);
  }, [isMuted, conversation]);

  const generateResponse = (query: string): string => {
    const lowerQuery = query.toLowerCase();
    let response = "I don't have specific information on that topic yet. For accurate cybersecurity advice, consider consulting official resources like NIST or CISA.";
    
    for (const [keyword, answer] of Object.entries(cybersecurityFAQ)) {
      if (lowerQuery.includes(keyword)) {
        response = answer;
        break;
      }
    }
    
    return response;
  };

  const handleImageUpload = (file: File) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      setSelectedImage(reader.result as string);
      setSelectedFile(file);
      toast({
        title: "Image Uploaded",
        description: "You can now ask questions about the image.",
      });
    };
    reader.readAsDataURL(file);
  };

  const handleImageRemove = () => {
    setSelectedImage(null);
    setSelectedFile(null);
      const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
      if (fileInput) {
        fileInput.value = ''; // Clear the file input value
      }
    };
  

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
      image: selectedImage || undefined,
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    handleImageRemove();
    setIsLoading(true);
    
    let response = selectedImage 
      ? `I can help analyze the image you've uploaded. ${generateResponse(input)}`
      : generateResponse(input);
    
    const botResponse: Message = {
      id: (Date.now() + 1).toString(),
      role: 'bot',
      content: response,
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, botResponse]);
    setIsLoading(false);

    if (isListening && !isMuted) {
      try {
        await conversation.setVolume({ volume: 1 });
      } catch (error) {
        console.error('TTS Error:', error);
      }
    }
  };

  const handleReset = () => {
    toast({
      title: "Chat Reset",
      description: "Your conversation has been reset.",
    });
    setMessages(initialMessages);
    setSelectedImage(null);
    setSelectedFile(null);
  };

  return {
    messages,
    input,
    isLoading,
    isListening,
    isMuted,
    selectedImage,
    handleImageUpload,
    handleImageRemove,
    handleSubmit,
    handleReset,
    toggleVoice,
    toggleMute,
    setInput,
  };
};
